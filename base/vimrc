" .vimrc
" by: Thomas Scrace <tom@scrace.org>

set nocompatible                    " don't worry about being vi compatible

call pathogen#incubate()            " enable pathogen

filetype plugin on                  " we need this for some plugins

set modelines=0                     " fix security vulnerability
set tabstop=4                       " tab characters count for 4 columns
set shiftwidth=4                    " indent operations move text 4 columns
set softtabstop=4                   " how many cols to use when hitting tab
set expandtab                       " insert spaces when hitting tab
set encoding=utf-8
set scrolloff=5                     " we get 5 lines of context for searches
set autoindent                      " newlines start at same indent as prev
set showmode                        " display current mode bottom left
set showcmd                         " show command at bottom of screen
set wildmenu
set wildmode=list:longest           " make command completion sane
set visualbell                      " flash instead of alert sound
set ttyfast                         " make screen redrawing faster
set ruler                           " show ROW, COL of cursor bottom right
set backspace=indent,eol,start      " make backspacing work
set laststatus=2                    " always show the status line
set undofile                        " undos persist across sessions
set wrap                            " softwrap lines wider than the window
set formatoptions+=q                " allow formatting of comments with gq
set formatoptions+=n                " recognise numbered lists when formatting
set formatoptions+=1                " don't break lines after 1-letter words
set colorcolumn=73,80,100           " highling columns 73, 80, 100
set textwidth=72                    " Lines break at 72 chars
set ignorecase                      " iff we search on an all-lowercase ...
set smartcase                       " ... string we are case-insensitive
set gdefault                        " apply substitutions globally by default
set incsearch                       " highlight
set showmatch                       "          search results
set hlsearch                        "                        as we type
set number
let mapleader = ','                 " remap leader key to ,

" Reload filetype stuff after vim knows where to look for golang stuff
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on


" Colour and highlighting
" -----------------------
syntax on                           " syntax highlighting
set t_Co=256                        " 256 colors
set background=dark                 " use colours for dark background
color grb256
" Customise the cursorline appearance
hi CursorLine cterm=NONE ctermfg=NONE ctermbg=234
set cursorline                      " highlight the cursor's current line

" Plugin customisation
" --------------------

let g:syntastic_python_checkers = ['flake8']


" Put tmp files in a central location:
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

"clear out searches using ,<space>
nnoremap <leader><space> :noh<cr>

"tab key matches to bracket pairs in normal and visual modes
nnoremap <tab> %
vnoremap <tab> %

" disable the cursor keys in normal and insert modes
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

"j and k operate across visual, rather than logical lines
nnoremap j gj
nnoremap k gk

" ctrl-h/j/k/l to move around splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" ,W strips all trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,q re-hardwraps paragraphs of text
nnoremap <leader>q gqap

" ,v selects the text that was just pasted into a buffer
nnoremap <leader>v V`]

" ,w opens a new vertical split and switches to it
nnoremap <leader>w <C-w>v<C-w>l

" ,e opens a new vertical split and switches to it
nnoremap <leader>e <C-w>s<C-w>j


"Functions
"---------

" ,n renames the current file. Stolen from Bernhardt.
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>


" Selecta
" -------
"
" See https://github.com/garybernhardt/selecta

" Run a given vim command on the results of fuzzy selecting from
" a given shell command. See usage below.
function! SelectaCommand(choice_command, selecta_args, vim_command)
  try
    silent let selection = system(a:choice_command . " | selecta " . a:selecta_args)
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise
    " there will be leftovers from selecta on the screen
    redraw!
    return
  endtry
  redraw!
  exec a:vim_command . " " . selection
endfunction

" Find all files in all non-dot directories starting in the
" working directory.  Fuzzy select one of those. Open the
" selected file with :e.
nnoremap <leader>f :call SelectaCommand("find * -type f", "", ":e")<cr>
